# BMAD-METHOD Agent Configuration for Stellar Connect
# =====================================================
# This configuration defines the multi-agent orchestration system
# based on Business-Minded Autonomous Development methodology

version: "1.0"
name: "Stellar Connect BMAD Orchestration"
description: "Multi-agent system for sales intelligence and automation"

# Agent Definitions
agents:
  business_analyst:
    name: "Strategic Business Analyst"
    role: "Requirement Engineering and Business Analysis"
    capabilities:
      - requirement_extraction
      - use_case_validation
      - success_criteria_definition
      - stakeholder_communication
    responsibilities:
      - "Extract and document business requirements from sales conversations"
      - "Validate requirements against business objectives"
      - "Define acceptance criteria and success metrics"
      - "Identify patterns in successful sales processes"
    tools:
      - vector_search
      - structured_extraction
      - requirement_templates
    collaboration:
      upstream: ["sales_specialist", "project_manager"]
      downstream: ["solution_architect", "developer"]
    memory:
      type: "persistent"
      retention_days: 90

  project_manager:
    name: "Agile Project Manager"
    role: "Orchestration and Delivery Management"
    capabilities:
      - sprint_planning
      - task_breakdown
      - resource_allocation
      - risk_management
    responsibilities:
      - "Break down complex projects into manageable tasks"
      - "Coordinate agent activities and handoffs"
      - "Track progress and manage dependencies"
      - "Ensure timely delivery of features"
    tools:
      - task_tracker
      - gantt_generator
      - burndown_charts
    collaboration:
      upstream: ["business_analyst"]
      downstream: ["all_agents"]
    memory:
      type: "persistent"
      retention_days: 180

  solution_architect:
    name: "Senior Solution Architect"
    role: "System Design and Architecture"
    capabilities:
      - system_design
      - technology_selection
      - pattern_implementation
      - scalability_planning
    responsibilities:
      - "Design scalable multi-agent architectures"
      - "Select optimal technology stack components"
      - "Define integration patterns and APIs"
      - "Ensure architectural best practices"
    tools:
      - knowledge_graph
      - architecture_templates
      - design_patterns
    collaboration:
      upstream: ["business_analyst", "project_manager"]
      downstream: ["developer", "qa_tester"]
    memory:
      type: "persistent"
      retention_days: 365

  developer:
    name: "Full-Stack Developer"
    role: "Implementation and Integration"
    capabilities:
      - code_generation
      - api_development
      - database_design
      - integration_implementation
    responsibilities:
      - "Implement features according to specifications"
      - "Write clean, maintainable, documented code"
      - "Create integration points between systems"
      - "Optimize performance and efficiency"
    tools:
      - code_generator
      - structured_extraction
      - test_generator
    collaboration:
      upstream: ["solution_architect", "business_analyst"]
      downstream: ["qa_tester", "project_manager"]
    memory:
      type: "contextual"
      retention_days: 30

  qa_tester:
    name: "Senior QA Engineer"
    role: "Quality Assurance and Testing"
    capabilities:
      - test_planning
      - test_execution
      - bug_detection
      - performance_testing
    responsibilities:
      - "Create comprehensive test strategies"
      - "Execute functional and non-functional tests"
      - "Identify edge cases and vulnerabilities"
      - "Ensure code quality and system reliability"
    tools:
      - test_runner
      - coverage_analyzer
      - vulnerability_scanner
    collaboration:
      upstream: ["developer", "solution_architect"]
      downstream: ["project_manager", "business_analyst"]
    memory:
      type: "persistent"
      retention_days: 60

  sales_specialist:
    name: "Elite Sales Strategist"
    role: "Domain Expertise and Sales Intelligence"
    capabilities:
      - sales_analysis
      - pattern_recognition
      - playbook_optimization
      - coaching_generation
    responsibilities:
      - "Analyze sales patterns and conversion metrics"
      - "Identify winning strategies from transcripts"
      - "Optimize sales playbooks and scripts"
      - "Provide domain expertise for system design"
    tools:
      - vector_search
      - knowledge_graph
      - structured_extraction
      - analytics_engine
    collaboration:
      upstream: ["business_analyst"]
      downstream: ["all_agents"]
    memory:
      type: "persistent"
      retention_days: 365

# Workflow Definitions
workflows:
  requirement_analysis:
    name: "Requirement Analysis and Validation"
    description: "Extract and validate business requirements"
    trigger: "user_request"
    steps:
      - agent: "business_analyst"
        action: "extract_requirements"
        output: "requirements_document"
      - agent: "sales_specialist"
        action: "validate_sales_impact"
        input: "requirements_document"
        output: "validated_requirements"
      - agent: "project_manager"
        action: "create_project_plan"
        input: "validated_requirements"
        output: "project_roadmap"

  system_implementation:
    name: "System Implementation Pipeline"
    description: "Design and implement system features"
    trigger: "approved_requirements"
    steps:
      - agent: "solution_architect"
        action: "design_architecture"
        output: "technical_design"
      - agent: "developer"
        action: "implement_solution"
        input: "technical_design"
        output: "implementation"
      - agent: "qa_tester"
        action: "test_implementation"
        input: "implementation"
        output: "test_report"
      - agent: "project_manager"
        action: "validate_delivery"
        input: "test_report"
        output: "deployment_approval"

  sales_optimization:
    name: "Sales Process Optimization"
    description: "Analyze and optimize sales processes"
    trigger: "performance_review"
    steps:
      - agent: "sales_specialist"
        action: "analyze_performance"
        output: "performance_insights"
      - agent: "business_analyst"
        action: "define_improvements"
        input: "performance_insights"
        output: "improvement_requirements"
      - agent: "solution_architect"
        action: "design_enhancements"
        input: "improvement_requirements"
        output: "enhancement_design"
      - agent: "developer"
        action: "implement_enhancements"
        input: "enhancement_design"
        output: "enhanced_system"

  continuous_improvement:
    name: "Continuous Improvement Loop"
    description: "Ongoing system optimization"
    trigger: "scheduled"
    frequency: "weekly"
    steps:
      - agent: "qa_tester"
        action: "system_health_check"
        output: "health_report"
      - agent: "sales_specialist"
        action: "analyze_metrics"
        output: "metric_analysis"
      - agent: "business_analyst"
        action: "identify_opportunities"
        input: ["health_report", "metric_analysis"]
        output: "opportunity_list"
      - agent: "project_manager"
        action: "prioritize_backlog"
        input: "opportunity_list"
        output: "prioritized_backlog"

# Collaboration Rules
collaboration:
  handoff_protocol:
    format: "structured_json"
    required_fields:
      - task_id
      - from_agent
      - to_agent
      - deliverables
      - context
      - acceptance_criteria

  communication_channels:
    synchronous:
      - direct_message
      - team_meeting
    asynchronous:
      - task_queue
      - shared_memory
      - event_bus

  conflict_resolution:
    escalation_path:
      - project_manager
      - solution_architect
      - human_operator

# Performance Metrics
metrics:
  agent_performance:
    - task_completion_rate
    - response_time
    - accuracy_score
    - collaboration_effectiveness

  system_performance:
    - throughput
    - latency
    - error_rate
    - resource_utilization

  business_metrics:
    - requirement_coverage
    - feature_delivery_velocity
    - defect_density
    - sales_conversion_improvement

# Quality Gates
quality_gates:
  requirement_gate:
    owner: "business_analyst"
    criteria:
      - completeness: 95
      - clarity: 90
      - testability: 100

  design_gate:
    owner: "solution_architect"
    criteria:
      - scalability: "validated"
      - security: "approved"
      - patterns: "applied"

  implementation_gate:
    owner: "qa_tester"
    criteria:
      - test_coverage: 80
      - code_quality: "A"
      - performance: "baseline"

# Memory and Learning
memory:
  storage_backend: "vector_db"
  indexing_strategy: "semantic"
  retention_policy:
    default: 90
    maximum: 365
  learning_triggers:
    - successful_completion
    - pattern_detection
    - error_correction

# Integration Points
integrations:
  stellar_crew:
    type: "native"
    module: "src.stellar_crew"
    agents:
      - retrieval_agent
      - data_extraction_agent
      - content_generation_agent

  specialist_agents:
    type: "extended"
    module: "agents.specialists"
    agents:
      - estate_librarian
      - trust_sales_analyst
      - market_scout
      - similar_case_finder
      - rebuttal_library

  reasoning_engine:
    type: "cognitive"
    module: "agents.reasoning"
    components:
      - gatekeeper
      - planner
      - auditor
      - strategist

# Deployment Configuration
deployment:
  mode: "distributed"
  orchestrator: "kubernetes"
  scaling:
    strategy: "horizontal"
    min_replicas: 1
    max_replicas: 10
    target_cpu: 70
  monitoring:
    - prometheus
    - grafana
    - custom_dashboards